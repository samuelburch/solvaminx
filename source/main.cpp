// Include standard headers

#include <fstream>
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <vector>

using namespace std;

// Include GLEW
#include <GL/glew.h>

// Include GLFW
#include <GLFW/glfw3.h>
GLFWwindow *window;

// Include GLM
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
using namespace glm;

#include "controls.hpp"
#include "shader.hpp"
#include "text2D.hpp"

typedef struct tile {
  vector<int> color_indices;
} tile;

typedef vector<tile> _tiles;

typedef struct face {

} face;

int main(void) {
  string line;
  ifstream file1("../resources/models/tiles.dat");
  vector<string> lines;
  if (file1.is_open()) {
    while (getline(file1, line)) {
      lines.push_back(line);
    }
    file1.close();
  } else
    cout << "Unable to open file";

  _tiles tiles;
  for (auto l : lines) {
    stringstream ss(l);
    tile t;
    int a;
    for (int i = 0; ss >> a;) {
      t.color_indices.push_back(a);
    }
    tiles.push_back(t);
  }

  ifstream file2("../resources/models/megaminx.v");
  lines = {};
  line = "";
  if (file2.is_open()) {
    while (getline(file2, line)) {
      lines.push_back(line);
    }
    file2.close();
  } else
    cout << "Unable to open file";

  vector<GLfloat> vertex_buff;

  for (auto l : lines) {
    stringstream ss(l);
    float f;
    for (int i = 0; ss >> f;) {
      vertex_buff.push_back(f);
    }
  }

  for (auto f: vertex_buff)
  cout << f << endl;

  // for (auto t : tiles)
  // {
  // 	for (auto c : t.color_indices)
  // 		cout << c << ' ';
  // 	cout << endl;
  // }
  cout << tiles.size() << endl;
  // Initialise GLFW
  if (!glfwInit()) {
    fprintf(stderr, "Failed to initialize GLFW\n");
    getchar();
    return -1;
  }

  glfwWindowHint(GLFW_SAMPLES, 4);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
  glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,
                 GL_TRUE); // To make MacOS happy;
                           // should not be needed
  glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

  // Open a window and create its OpenGL context
  window = glfwCreateWindow(1024, 768, "Megaminx", NULL, NULL);
  if (window == NULL) {
    fprintf(stderr, "Failed to open GLFW window. If you "
                    "have an Intel GPU, they are "
                    "not 3.3 compatible. Try the 2.1 "
                    "version of the tutorials.\n");
    getchar();
    glfwTerminate();
    return -1;
  }
  glfwMakeContextCurrent(window);

  // Initialize GLEW
  glewExperimental = true; // Needed for core profile
  if (glewInit() != GLEW_OK) {
    fprintf(stderr, "Failed to initialize GLEW\n");
    getchar();
    glfwTerminate();
    return -1;
  }

  // Ensure we can capture the escape key being
  // pressed below
  glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);
  // Dark blue background
  glClearColor(0.0f, 0.0f, 0.4f, 0.0f);
  // Enable depth test
  glEnable(GL_DEPTH_TEST);
  // Accept fragment if it closer to the camera
  // than the former one
  glDepthFunc(GL_LESS);

  GLuint VertexArrayID;
  glGenVertexArrays(1, &VertexArrayID);
  glBindVertexArray(VertexArrayID);

  // Create and compile our GLSL program from the
  // shaders
  GLuint programID = LoadShaders("../resources/shaders/"
                                 "TransformVertexShader.vertexshader",
                                 "../resources/shaders/"
                                 "ColorFragmentShader.fragmentshader");

  // Get a handle for our "MVP" uniform
  GLuint MatrixID = glGetUniformLocation(programID, "MVP");
  glm::mat4 Projection =
      glm::perspective(glm::radians(45.0f), 4.0f / 3.0f, 0.1f, 100.0f);
  // Camera matrix
  glm::mat4 View = glm::lookAt(glm::vec3(0, 0,
                                         0), // Camera is at (4,3,-3), in
                                             // World Space
                               glm::vec3(0, 0,
                                         0), // and looks at the origin
                               glm::vec3(0, 1,
                                         0) // Head is up (set to 0,-1,0 to
                                            // look upside-down)
  );
  glm::mat4 Model = glm::mat4(1.0f);
  glm::mat4 MVP = Projection * View * Model; // Remember, matrix multiplication
                                             // is the other way around
  static const GLfloat g_vertex_buffer_data[] = {
      0.399444f,     0.0f,          0.129787f,     0.0f,         0.0f,
      0.0f,          0.24687f,      0.0f,          -0.339786f,   0.399444f,
      0.0f,          0.129787f,     0.0f,          0.0f,         0.42f,
      0.0f,          0.0f,          0.0f,          0.456507f,    0.0f,
      0.628329f,     0.0f,          0.0f,          0.42f,        0.399444f,
      0.0f,          0.129787f,     0.456507f,     0.0f,         0.628329f,
      0.0f,          0.0f,          0.96f,         0.0f,         0.0f,
      0.42f,         0.372165f,     0.390285f,     0.932238f,    0.0f,
      0.0f,          0.96f,         0.456507f,     0.0f,         0.628329f,
      0.000664125f,  0.479433f,     1.25757f,      0.0f,         0.0f,
      0.96f,         0.372165f,     0.390285f,     0.932238f,    0.372744f,
      0.80979f,      1.19261f,      0.000664125f,  0.479433f,    1.25757f,
      0.372165f,     0.390285f,     0.932238f,     0.00132825f,  0.958866f,
      1.55514f,      0.000664125f,  0.479433f,     1.25757f,     0.372744f,
      0.80979f,      1.19261f,      0.372744f,     0.80979f,     1.19261f,
      0.00132825f,   0.958866f,     1.55514f,      0.458247f,    1.25517f,
      1.40738f,      0.458247f,     1.25517f,      1.40738f,     0.772548f,
      1.06906f,      1.06332f,      0.372744f,     0.80979f,     1.19261f,
      0.915162f,     1.55148f,      1.25961f,      0.772548f,    1.06906f,
      1.06332f,      0.458247f,     1.25517f,      1.40738f,     0.915162f,
      1.55148f,      1.25961f,      1.19689f,      1.25517f,     0.87072f,
      0.772548f,     1.06906f,      1.06332f,      1.19689f,     1.25517f,
      0.87072f,      1.01906f,      0.80979f,      0.723039f,    0.772548f,
      1.06906f,      1.06332f,      1.19689f,      1.25517f,     0.87072f,
      1.47862f,      0.958866f,     0.481827f,     1.01906f,     0.80979f,
      0.723039f,     1.47862f,      0.958866f,     0.481827f,    1.19581f,
      0.479433f,     0.389241f,     1.01906f,      0.80979f,     0.723039f,
      1.01906f,      0.80979f,      0.723039f,     1.19581f,     0.479433f,
      0.389241f,     0.771606f,     0.390285f,     0.642027f,    1.19581f,
      0.479433f,     0.389241f,     0.913014f,     0.0f,         0.296656f,
      0.771606f,     0.390285f,     0.642027f,     0.771606f,    0.390285f,
      0.642027f,     0.913014f,     0.0f,          0.296656f,    0.456507f,
      0.0f,          0.628329f,     0.456507f,     0.0f,         0.628329f,
      0.399444f,     0.0f,          0.129787f,     0.913014f,    0.0f,
      0.296656f,     0.913014f,     0.0f,          0.296656f,    0.399444f,
      0.0f,          0.129787f,     0.738645f,     0.0f,         -0.24f,
      0.738645f,     0.0f,          -0.24f,        0.399444f,    0.0f,
      0.129787f,     0.24687f,      0.0f,          -0.339786f,   0.738645f,
      0.0f,          -0.24f,        0.24687f,      0.0f,         -0.339786f,
      0.564273f,     0.0f,          -0.776655f,    0.564273f,    0.0f,
      -0.776655f,    0.24687f,      0.0f,          -0.339786f,   0.0f,
      0.0f,          -0.776655f,    0.24687f,      0.0f,         -0.339786f,
      -0.24687f,     0.0f,          -0.339786f,    0.0f,         0.0f,
      -0.776655f,    0.24687f,      0.0f,          -0.339786f,   0.0f,
      0.0f,          0.0f,          -0.24687f,     0.0f,         -0.339786f,
      0.0f,          0.0f,          0.0f,          -0.399444f,   0.0f,
      0.129787f,     -0.24687f,     0.0f,          -0.339786f,   0.0f,
      0.0f,          0.0f,          0.0f,          0.0f,         0.42f,
      -0.399444f,    0.0f,          0.129787f,     0.0f,         0.0f,
      0.42f,         -0.456507f,    0.0f,          0.628329f,    -0.399444f,
      0.0f,          0.129787f,     0.0f,          0.0f,         0.42f,
      0.0f,          0.0f,          0.96f,         -0.456507f,   0.0f,
      0.628329f,     -0.372564f,    0.389943f,     0.93279f,     -0.456507f,
      0.0f,          0.628329f,     0.0f,          0.0f,         0.96f,
      -0.772008f,    0.389943f,     0.642576f,     -0.456507f,   0.0f,
      0.628329f,     -0.372564f,    0.389943f,     0.93279f,     -0.772008f,
      0.389943f,     0.642576f,     -0.913014f,    0.0f,         0.296656f,
      -0.456507f,    0.0f,          0.628329f,     -1.19631f,    0.479013f,
      0.389919f,     -0.913014f,    0.0f,          0.296656f,    -0.772008f,
      0.389943f,     0.642576f,     -1.01989f,     0.809079f,    0.724182f,
      -1.19631f,     0.479013f,     0.389919f,     -0.772008f,   0.389943f,
      0.642576f,     -1.4796f,      0.958023f,     0.483183f,    -1.19631f,
      0.479013f,     0.389919f,     -1.01989f,     0.809079f,    0.724182f,
      -1.19818f,     1.25407f,      0.872493f,     -1.4796f,     0.958023f,
      0.483183f,     -1.01989f,     0.809079f,     0.724182f,    -1.19818f,
      1.25407f,      0.872493f,     -1.01989f,     0.809079f,    0.724182f,
      -0.773643f,    1.06812f,      1.06483f,      -0.773643f,   1.06812f,
      1.06483f,      -1.01989f,     0.809079f,     0.724182f,    -0.662337f,
      0.693231f,     0.911628f,     -1.01989f,     0.809079f,    0.724182f,
      -0.772008f,    0.389943f,     0.642576f,     -0.662337f,   0.693231f,
      0.911628f,     -0.662337f,    0.693231f,     0.911628f,    -0.772008f,
      0.389943f,     0.642576f,     -0.372564f,    0.389943f,    0.93279f,
      -0.373575f,    0.809079f,     1.19376f,      -0.662337f,   0.693231f,
      0.911628f,     -0.372564f,    0.389943f,     0.93279f,     -0.773643f,
      1.06812f,      1.06483f,      -0.662337f,    0.693231f,    0.911628f,
      -0.373575f,    0.809079f,     1.19376f,      -0.459534f,   1.25407f,
      1.40915f,      -0.773643f,    1.06812f,      1.06483f,     -0.373575f,
      0.809079f,     1.19376f,      -0.916755f,    1.55011f,     1.2618f,
      -0.773643f,    1.06812f,      1.06483f,      -0.459534f,   1.25407f,
      1.40915f,      -0.916755f,    1.55011f,      1.2618f,      -1.19818f,
      1.25407f,      0.872493f,     -0.773643f,    1.06812f,     1.06483f,
      -0.459534f,    1.25407f,      1.40915f,      -0.373575f,   0.809079f,
      1.19376f,      -0.0023115f,   0.958023f,     1.55649f,     -0.373575f,
      0.809079f,     1.19376f,      -0.0023115f,   0.958023f,    1.55649f,
      -0.00115575f,  0.479013f,     1.25825f,      -0.373575f,   0.809079f,
      1.19376f,      -0.372564f,    0.389943f,     0.93279f,     -0.00115575f,
      0.479013f,     1.25825f,      -0.00115575f,  0.479013f,    1.25825f,
      -0.372564f,    0.389943f,     0.93279f,      0.0f,         0.0f,
      0.96f,         -0.399444f,    0.0f,          0.129787f,    -0.456507f,
      0.0f,          0.628329f,     -0.913014f,    0.0f,         0.296656f,
      -0.399444f,    0.0f,          0.129787f,     -0.913014f,   0.0f,
      0.296656f,     -0.738645f,    0.0f,          -0.24f,       -0.738645f,
      0.0f,          -0.24f,        -0.913014f,    0.0f,         0.296656f,
      -0.999672f,    0.391308f,     -0.0652386f,   -0.999672f,   0.391308f,
      -0.0652386f,   -0.913014f,    0.0f,          0.296656f,    -1.19384f,
      0.48069f,      0.388755f,     -0.999672f,    0.391308f,    -0.0652386f,
      -1.24539f,     0.811911f,     0.0153484f,    -1.19384f,    0.48069f,
      0.388755f,     -1.06707f,     0.695661f,     -0.346713f,   -0.999672f,
      0.391308f,     -0.0652386f,   -1.24539f,     0.811911f,    0.0153484f,
      -0.847098f,    0.391308f,     -0.534813f,    -0.999672f,   0.391308f,
      -0.0652386f,   -1.06707f,     0.695661f,     -0.346713f,   -0.847098f,
      0.391308f,     -0.534813f,    -0.738645f,    0.0f,         -0.24f,
      -0.999672f,    0.391308f,     -0.0652386f,   -0.564273f,   0.0f,
      -0.776655f,    -0.738645f,    0.0f,          -0.24f,       -0.847098f,
      0.391308f,     -0.534813f,    -0.24687f,     0.0f,         -0.339786f,
      -0.738645f,    0.0f,          -0.24f,        -0.564273f,   0.0f,
      -0.776655f,    -0.24687f,     0.0f,          -0.339786f,   -0.399444f,
      0.0f,          0.129787f,     -0.738645f,    0.0f,         -0.24f,
      0.0f,          0.0f,          -0.776655f,    -0.24687f,    0.0f,
      -0.339786f,    -0.564273f,    0.0f,          -0.776655f,   -0.24687f,
      0.390285f,     -0.972951f,    0.0f,          0.0f,         -0.776655f,
      -0.564273f,    0.0f,          -0.776655f,    0.24687f,     0.390285f,
      -0.972951f,    0.0f,          0.0f,          -0.776655f,   -0.24687f,
      0.390285f,     -0.972951f,    0.24687f,      0.390285f,    -0.972951f,
      0.564273f,     0.0f,          -0.776655f,    0.0f,         0.0f,
      -0.776655f,    0.738645f,     0.479433f,     -1.01779f,    0.564273f,
      0.0f,          -0.776655f,    0.24687f,      0.390285f,    -0.972951f,
      0.399444f,     0.80979f,      -1.18394f,     0.738645f,    0.479433f,
      -1.01779f,     0.24687f,      0.390285f,     -0.972951f,   0.913014f,
      0.958866f,     -1.25892f,     0.738645f,     0.479433f,    -1.01779f,
      0.399444f,     0.80979f,      -1.18394f,     0.456507f,    1.25517f,
      -1.40794f,     0.913014f,     0.958866f,     -1.25892f,    0.399444f,
      0.80979f,      -1.18394f,     0.456507f,     1.25517f,     -1.40794f,
      0.399444f,     0.80979f,      -1.18394f,     0.0f,         1.06906f,
      -1.31434f,     0.0f,          1.06906f,      -1.31434f,    0.399444f,
      0.80979f,      -1.18394f,     0.0f,          0.693843f,    -1.12562f,
      0.399444f,     0.80979f,      -1.18394f,     0.24687f,     0.390285f,
      -0.972951f,    0.0f,          0.693843f,     -1.12562f,    0.0f,
      0.693843f,     -1.12562f,     0.24687f,      0.390285f,    -0.972951f,
      -0.24687f,     0.390285f,     -0.972951f,    -0.399444f,   0.80979f,
      -1.18394f,     0.0f,          0.693843f,     -1.12562f,    -0.24687f,
      0.390285f,     -0.972951f,    0.0f,          1.06906f,     -1.31434f,
      0.0f,          0.693843f,     -1.12562f,     -0.399444f,   0.80979f,
      -1.18394f,     -0.456507f,    1.25517f,      -1.40794f,    0.0f,
      1.06906f,      -1.31434f,     -0.399444f,    0.80979f,     -1.18394f,
      0.0f,          1.55148f,      -1.55697f,     0.0f,         1.06906f,
      -1.31434f,     -0.456507f,    1.25517f,      -1.40794f,    0.0f,
      1.55148f,      -1.55697f,     0.456507f,     1.25517f,     -1.40794f,
      0.0f,          1.06906f,      -1.31434f,     -0.456507f,   1.25517f,
      -1.40794f,     -0.399444f,    0.80979f,      -1.18394f,    -0.913014f,
      0.958866f,     -1.25892f,     -0.913014f,    0.958866f,    -1.25892f,
      -0.399444f,    0.80979f,      -1.18394f,     -0.738645f,   0.479433f,
      -1.01779f,     -0.399444f,    0.80979f,      -1.18394f,    -0.24687f,
      0.390285f,     -0.972951f,    -0.738645f,    0.479433f,    -1.01779f,
      -0.738645f,    0.479433f,     -1.01779f,     -0.24687f,    0.390285f,
      -0.972951f,    -0.564273f,    0.0f,          -0.776655f,   -0.737328f,
      0.48069f,      -1.01623f,     -0.564273f,    0.0f,         -0.776655f,
      -0.847098f,    0.391308f,     -0.534813f,    -0.737328f,   0.48069f,
      -1.01623f,     -0.847098f,    0.391308f,     -0.534813f,   -0.99852f,
      0.811911f,     -0.744438f,    -0.99852f,     0.811911f,    -0.744438f,
      -0.847098f,    0.391308f,     -0.534813f,    -1.06707f,    0.695661f,
      -0.346713f,    -0.99852f,     0.811911f,     -0.744438f,   -1.06707f,
      0.695661f,     -0.346713f,    -1.24468f,     1.07186f,     -0.404421f,
      -1.24468f,     1.07186f,      -0.404421f,    -1.06707f,    0.695661f,
      -0.346713f,    -1.24539f,     0.811911f,     0.0153484f,   -1.24468f,
      1.07186f,      -0.404421f,    -1.47384f,     1.25846f,     0.00111946f,
      -1.24539f,     0.811911f,     0.0153484f,    -1.47384f,    1.25846f,
      0.00111946f,   -1.24468f,     1.07186f,      -0.404421f,   -1.47303f,
      1.55554f,      -0.478617f,    -1.1917f,      1.25846f,     -0.86721f,
      -1.24468f,     1.07186f,      -0.404421f,    -1.47303f,    1.55554f,
      -0.478617f,    -1.1917f,      1.25846f,      -0.86721f,    -0.99852f,
      0.811911f,     -0.744438f,    -1.24468f,     1.07186f,     -0.404421f,
      -0.910383f,    0.96138f,      -1.2558f,      -0.99852f,    0.811911f,
      -0.744438f,    -1.1917f,      1.25846f,      -0.86721f,    -0.910383f,
      0.96138f,      -1.2558f,      -0.737328f,    0.48069f,     -1.01623f,
      -0.99852f,     0.811911f,     -0.744438f,    -1.47384f,    1.25846f,
      0.00111946f,   -1.47466f,     0.96138f,      0.480855f,    -1.24539f,
      0.811911f,     0.0153484f,    -1.24539f,     0.811911f,    0.0153484f,
      -1.47466f,     0.96138f,      0.480855f,     -1.19384f,    0.48069f,
      0.388755f,     0.564273f,     0.0f,          -0.776655f,   0.847098f,
      0.391308f,     -0.534813f,    0.738645f,     0.0f,         -0.24f,
      0.737328f,     0.48069f,      -1.01623f,     0.847098f,    0.391308f,
      -0.534813f,    0.564273f,     0.0f,          -0.776655f,   0.737328f,
      0.48069f,      -1.01623f,     0.847098f,     0.391308f,    -0.534813f,
      0.99852f,      0.811911f,     -0.744438f,    0.99852f,     0.811911f,
      -0.744438f,    1.06707f,      0.695661f,     -0.346713f,   0.847098f,
      0.391308f,     -0.534813f,    0.99852f,      0.811911f,    -0.744438f,
      1.24468f,      1.07186f,      -0.404421f,    1.06707f,     0.695661f,
      -0.346713f,    1.1917f,       1.25846f,      -0.86721f,    0.99852f,
      0.811911f,     -0.744438f,    1.24468f,      1.07186f,     -0.404421f,
      0.910383f,     0.96138f,      -1.2558f,      0.99852f,     0.811911f,
      -0.744438f,    1.1917f,       1.25846f,      -0.86721f,    0.910383f,
      0.96138f,      -1.2558f,      0.737328f,     0.48069f,     -1.01623f,
      0.99852f,      0.811911f,     -0.744438f,    1.1917f,      1.25846f,
      -0.86721f,     1.47303f,      1.55554f,      -0.478617f,   1.24468f,
      1.07186f,      -0.404421f,    1.47303f,      1.55554f,     -0.478617f,
      1.47384f,      1.25846f,      0.00111946f,   1.24468f,     1.07186f,
      -0.404421f,    1.24468f,      1.07186f,      -0.404421f,   1.47384f,
      1.25846f,      0.00111946f,   1.24539f,      0.811911f,    0.0153484f,
      1.47384f,      1.25846f,      0.00111946f,   1.47466f,     0.96138f,
      0.480855f,     1.24539f,      0.811911f,     0.0153484f,   1.24539f,
      0.811911f,     0.0153484f,    1.47466f,      0.96138f,     0.480855f,
      1.19384f,      0.48069f,      0.388755f,     0.999672f,    0.391308f,
      -0.0652386f,   1.24539f,      0.811911f,     0.0153484f,   1.19384f,
      0.48069f,      0.388755f,     1.06707f,      0.695661f,    -0.346713f,
      1.24539f,      0.811911f,     0.0153484f,    0.999672f,    0.391308f,
      -0.0652386f,   1.24468f,      1.07186f,      -0.404421f,   1.24539f,
      0.811911f,     0.0153484f,    1.06707f,      0.695661f,    -0.346713f,
      0.847098f,     0.391308f,     -0.534813f,    1.06707f,     0.695661f,
      -0.346713f,    0.999672f,     0.391308f,     -0.0652386f,  0.847098f,
      0.391308f,     -0.534813f,    0.999672f,     0.391308f,    -0.0652386f,
      0.738645f,     0.0f,          -0.24f,        0.738645f,    0.0f,
      -0.24f,        0.999672f,     0.391308f,     -0.0652386f,  0.913014f,
      0.0f,          0.296656f,     0.999672f,     0.391308f,    -0.0652386f,
      1.19384f,      0.48069f,      0.388755f,     0.913014f,    0.0f,
      0.296656f,     0.372165f,     0.390285f,     0.932238f,    0.456507f,
      0.0f,          0.628329f,     0.771606f,     0.390285f,    0.642027f,
      0.661623f,     0.693843f,     0.910647f,     0.771606f,    0.390285f,
      0.642027f,     0.372165f,     0.390285f,     0.932238f,    1.01906f,
      0.80979f,      0.723039f,     0.771606f,     0.390285f,    0.642027f,
      0.661623f,     0.693843f,     0.910647f,     0.772548f,    1.06906f,
      1.06332f,      1.01906f,      0.80979f,      0.723039f,    0.661623f,
      0.693843f,     0.910647f,     0.772548f,     1.06906f,     1.06332f,
      0.661623f,     0.693843f,     0.910647f,     0.372744f,    0.80979f,
      1.19261f,      0.372744f,     0.80979f,      1.19261f,     0.661623f,
      0.693843f,     0.910647f,     0.372165f,     0.390285f,    0.932238f,
      0.913326f,     2.51692f,      -0.295699f,    0.738393f,    2.51692f,
      0.240775f,     0.399579f,     2.51692f,      -0.129368f,   0.913326f,
      2.51692f,      -0.295699f,    1.0022f,       2.12698f,     0.0671325f,
      0.738393f,     2.51692f,      0.240775f,     1.19743f,     2.03791f,
      -0.386466f,    1.0022f,       2.12698f,      0.0671325f,   0.913326f,
      2.51692f,      -0.295699f,    1.19743f,      2.03791f,     -0.386466f,
      1.25078f,      1.70784f,      -0.0122881f,   1.0022f,      2.12698f,
      0.0671325f,    1.48153f,      1.5589f,       -0.477231f,   1.25078f,
      1.70784f,      -0.0122881f,   1.19743f,      2.03791f,     -0.386466f,
      1.48153f,      1.5589f,       -0.477231f,    1.48218f,     1.26285f,
      0.00314517f,   1.25078f,      1.70784f,      -0.0122881f,  1.25078f,
      1.70784f,      -0.0122881f,   1.48218f,      1.26285f,     0.00314517f,
      1.25135f,      1.44881f,      0.408042f,     1.48218f,     1.26285f,
      0.00314517f,   1.25135f,      1.44881f,      0.408042f,    1.48283f,
      0.966807f,     0.483522f,     1.25135f,      1.44881f,     0.408042f,
      1.19913f,      1.26285f,      0.871176f,     1.48283f,     0.966807f,
      0.483522f,     1.25135f,      1.44881f,      0.408042f,    1.19913f,
      1.26285f,      0.871176f,     1.00312f,      1.70784f,     0.74724f,
      1.00312f,      1.70784f,      0.74724f,      1.19913f,     1.26285f,
      0.871176f,     0.915435f,     1.5589f,       1.25883f,     1.00312f,
      1.70784f,      0.74724f,      0.915435f,     1.5589f,      1.25883f,
      0.739446f,     2.03791f,      1.01804f,      0.849129f,    2.12698f,
      0.536547f,     1.00312f,      1.70784f,      0.74724f,     0.739446f,
      2.03791f,      1.01804f,      1.07131f,      1.82369f,     0.349335f,
      1.00312f,      1.70784f,      0.74724f,      0.849129f,    2.12698f,
      0.536547f,     1.07131f,      1.82369f,      0.349335f,    1.25135f,
      1.44881f,      0.408042f,     1.00312f,      1.70784f,     0.74724f,
      1.25078f,      1.70784f,      -0.0122881f,   1.25135f,     1.44881f,
      0.408042f,     1.07131f,      1.82369f,      0.349335f,    1.25078f,
      1.70784f,      -0.0122881f,   1.07131f,      1.82369f,     0.349335f,
      1.0022f,       2.12698f,      0.0671325f,    1.0022f,      2.12698f,
      0.0671325f,    1.07131f,      1.82369f,      0.349335f,    0.849129f,
      2.12698f,      0.536547f,     1.0022f,       2.12698f,     0.0671325f,
      0.849129f,     2.12698f,      0.536547f,     0.738393f,    2.51692f,
      0.240775f,     0.738393f,     2.51692f,      0.240775f,    0.849129f,
      2.12698f,      0.536547f,     0.56346f,      2.51692f,     0.777249f,
      0.849129f,     2.12698f,      0.536547f,     0.56346f,     2.51692f,
      0.777249f,     0.739446f,     2.03791f,      1.01804f,     0.738393f,
      2.51692f,      0.240775f,     0.56346f,      2.51692f,     0.777249f,
      0.246513f,     2.51692f,      0.340047f,     0.56346f,     2.51692f,
      0.777249f,     -0.000814506f, 2.51692f,      0.776655f,    0.246513f,
      2.51692f,      0.340047f,     -0.000814506f, 2.51692f,     0.776655f,
      0.245849f,     2.12664f,      0.973209f,     0.56346f,     2.51692f,
      0.777249f,     -0.000814506f, 2.51692f,      0.776655f,    -0.24789f,
      2.12664f,      0.97269f,      0.245849f,     2.12664f,     0.973209f,
      -0.000814506f, 2.51692f,      0.776655f,     -0.565089f,   2.51692f,
      0.776064f,     -0.24789f,     2.12664f,      0.97269f,     -0.000814506f,
      2.51692f,      0.776655f,     -0.247226f,    2.51692f,     0.339528f,
      -0.565089f,    2.51692f,      0.776064f,     -0.247226f,   2.51692f,
      0.339528f,     -0.565089f,    2.51692f,      0.776064f,    -0.738894f,
      2.51692f,      0.239225f,     -0.738894f,    2.51692f,     0.239225f,
      -0.847659f,    2.12561f,      0.533925f,     -0.565089f,   2.51692f,
      0.776064f,     -0.999738f,    2.12561f,      0.0641901f,   -0.847659f,
      2.12561f,      0.533925f,     -0.738894f,    2.51692f,     0.239225f,
      -0.999738f,    2.12561f,      0.0641901f,    -1.06743f,    1.82126f,
      0.345594f,     -0.847659f,    2.12561f,      0.533925f,    -1.24537f,
      1.70501f,      -0.0166545f,   -1.06743f,     1.82126f,     0.345594f,
      -0.999738f,    2.12561f,      0.0641901f,    -1.24537f,    1.70501f,
      -0.0166545f,   -1.2451f,      1.44506f,      0.403116f,    -1.06743f,
      1.82126f,      0.345594f,     -1.24537f,     1.70501f,     -0.0166545f,
      -1.2451f,      1.44506f,      0.403116f,     -1.47384f,    1.25846f,
      -0.00266512f,  -1.47384f,     1.25846f,      -0.00266512f, -1.2451f,
      1.44506f,      0.403116f,     -1.47353f,     0.96138f,     0.477072f,
      -1.2451f,      1.44506f,      0.403116f,     -1.47353f,    0.96138f,
      0.477072f,     -1.19261f,     1.25846f,      0.865959f,    -1.2451f,
      1.44506f,      0.403116f,     -1.19261f,     1.25846f,     0.865959f,
      -0.9993f,      1.70501f,      0.743391f,     -0.9993f,     1.70501f,
      0.743391f,     -1.19261f,     1.25846f,      0.865959f,    -0.9117f,
      1.55554f,      1.25485f,      -0.9993f,      1.70501f,     0.743391f,
      -0.9117f,      1.55554f,      1.25485f,      -0.738393f,   2.03623f,
      1.01546f,      -0.847659f,    2.12561f,      0.533925f,    -0.9993f,
      1.70501f,      0.743391f,     -0.738393f,    2.03623f,     1.01546f,
      -1.06743f,     1.82126f,      0.345594f,     -0.9993f,     1.70501f,
      0.743391f,     -0.847659f,    2.12561f,      0.533925f,    -1.06743f,
      1.82126f,      0.345594f,     -1.2451f,      1.44506f,     0.403116f,
      -0.9993f,      1.70501f,      0.743391f,     -0.847659f,   2.12561f,
      0.533925f,     -0.738393f,    2.03623f,      1.01546f,     -0.565089f,
      2.51692f,      0.776064f,     -1.47415f,     1.55554f,     -0.4824f,
      -1.24537f,     1.70501f,      -0.0166545f,   -1.47384f,    1.25846f,
      -0.00266512f,  -1.47415f,     1.55554f,      -0.4824f,     -1.19343f,
      2.03623f,      -0.390009f,    -1.24537f,     1.70501f,     -0.0166545f,
      -1.19343f,     2.03623f,      -0.390009f,    -0.999738f,   2.12561f,
      0.0641901f,    -1.24537f,     1.70501f,      -0.0166545f,  -1.19343f,
      2.03623f,      -0.390009f,    -0.999738f,    2.12561f,     0.0641901f,
      -0.912702f,    2.51692f,      -0.297614f,    -0.912702f,   2.51692f,
      -0.297614f,    -0.999738f,    2.12561f,      0.0641901f,   -0.738894f,
      2.51692f,      0.239225f,     -0.399306f,    2.51692f,     -0.130206f,
      -0.738894f,    2.51692f,      0.239225f,     -0.912702f,   2.51692f,
      -0.297614f,    -0.247226f,    2.51692f,      0.339528f,    -0.738894f,
      2.51692f,      0.239225f,     -0.399306f,    2.51692f,     -0.130206f,
      0.0f,          2.51692f,      0.0f,          -0.247226f,   2.51692f,
      0.339528f,     -0.399306f,    2.51692f,      -0.130206f,   0.246513f,
      2.51692f,      0.340047f,     -0.247226f,    2.51692f,     0.339528f,
      0.0f,          2.51692f,      0.0f,          0.246513f,    2.51692f,
      0.340047f,     -0.000814506f, 2.51692f,      0.776655f,    -0.247226f,
      2.51692f,      0.339528f,     0.399579f,     2.51692f,     -0.129368f,
      0.246513f,     2.51692f,      0.340047f,     0.0f,         2.51692f,
      0.0f,          0.738393f,     2.51692f,      0.240775f,    0.246513f,
      2.51692f,      0.340047f,     0.399579f,     2.51692f,     -0.129368f,
      0.399579f,     2.51692f,      -0.129368f,    0.0f,         2.51692f,
      0.0f,          0.000440469f,  2.51692f,      -0.42f,       0.000440469f,
      2.51692f,      -0.42f,        0.0f,          2.51692f,     0.0f,
      -0.399306f,    2.51692f,      -0.130206f,    0.000440469f, 2.51692f,
      -0.42f,        -0.399306f,    2.51692f,      -0.130206f,   -0.455847f,
      2.51692f,      -0.628806f,    -0.399306f,    2.51692f,     -0.130206f,
      -0.912702f,    2.51692f,      -0.297614f,    -0.455847f,   2.51692f,
      -0.628806f,    -0.912702f,    2.51692f,      -0.297614f,   -0.770934f,
      2.12664f,      -0.642834f,    -0.455847f,    2.51692f,     -0.628806f,
      -0.912702f,    2.51692f,      -0.297614f,    -1.19541f,    2.03749f,
      -0.390495f,    -0.770934f,    2.12664f,      -0.642834f,   -0.770934f,
      2.12664f,      -0.642834f,    -1.0183f,      1.70713f,     -0.724107f,
      -1.19541f,     2.03749f,      -0.390495f,    -0.770934f,   2.12664f,
      -0.642834f,    -0.660669f,    1.82308f,      -0.91134f,    -1.0183f,
      1.70713f,      -0.724107f,    -0.371187f,    2.12664f,     -0.932628f,
      -0.660669f,    1.82308f,      -0.91134f,     -0.770934f,   2.12664f,
      -0.642834f,    -0.371187f,    2.12664f,      -0.932628f,   -0.371493f,
      1.70713f,      -1.193f,       -0.660669f,    1.82308f,     -0.91134f,
      -0.371187f,    2.12664f,      -0.932628f,    0.000654732f, 2.03749f,
      -1.25757f,     -0.371493f,    1.70713f,      -1.193f,      0.00100678f,
      2.51692f,      -0.96f,        0.000654732f,  2.03749f,     -1.25757f,
      -0.371187f,    2.12664f,      -0.932628f,    -0.455847f,   2.51692f,
      -0.628806f,    0.00100678f,   2.51692f,      -0.96f,       -0.371187f,
      2.12664f,      -0.932628f,    0.00100678f,   2.51692f,     -0.96f,
      0.000440469f,  2.51692f,      -0.42f,        -0.455847f,   2.51692f,
      -0.628806f,    0.457167f,     2.51692f,      -0.627849f,   0.000440469f,
      2.51692f,      -0.42f,        0.00100678f,   2.51692f,     -0.96f,
      0.457167f,     2.51692f,      -0.627849f,    0.399579f,    2.51692f,
      -0.129368f,    0.000440469f,  2.51692f,      -0.42f,       0.913326f,
      2.51692f,      -0.295699f,    0.399579f,     2.51692f,     -0.129368f,
      0.457167f,     2.51692f,      -0.627849f,    0.457167f,    2.51692f,
      -0.627849f,    0.771075f,     2.12561f,      -0.639564f,   0.913326f,
      2.51692f,      -0.295699f,    0.457167f,     2.51692f,     -0.627849f,
      0.371937f,     2.12561f,      -0.930195f,    0.771075f,    2.12561f,
      -0.639564f,    0.00100678f,   2.51692f,      -0.96f,       0.371937f,
      2.12561f,      -0.930195f,    0.457167f,     2.51692f,     -0.627849f,
      0.00100678f,   2.51692f,      -0.96f,        0.000503391f, 2.03623f,
      -1.25554f,     0.371937f,     2.12561f,      -0.930195f,   0.371937f,
      2.12561f,      -0.930195f,    0.371496f,     1.70501f,     -1.18879f,
      0.000503391f,  2.03623f,      -1.25554f,     0.371937f,    2.12561f,
      -0.930195f,    0.371496f,     1.70501f,      -1.18879f,    0.660438f,
      1.82126f,      -0.907014f,    0.660438f,     1.82126f,     -0.907014f,
      0.371496f,     1.70501f,      -1.18879f,     0.770364f,    1.44506f,
      -1.05798f,     0.371496f,     1.70501f,      -1.18879f,    0.770364f,
      1.44506f,      -1.05798f,     0.455847f,     1.25846f,     -1.40158f,
      0.770364f,     1.44506f,      -1.05798f,     0.911697f,    0.96138f,
      -1.25208f,     0.455847f,     1.25846f,      -1.40158f,    0.770364f,
      1.44506f,      -1.05798f,     0.911697f,     0.96138f,     -1.25208f,
      1.19393f,      1.25846f,      -0.864147f,    1.01732f,     1.70501f,
      -0.718539f,    0.770364f,     1.44506f,      -1.05798f,    1.19393f,
      1.25846f,      -0.864147f,    0.660438f,     1.82126f,     -0.907014f,
      0.770364f,     1.44506f,      -1.05798f,     1.01732f,     1.70501f,
      -0.718539f,    0.771075f,     2.12561f,      -0.639564f,   0.660438f,
      1.82126f,      -0.907014f,    1.01732f,      1.70501f,     -0.718539f,
      0.371937f,     2.12561f,      -0.930195f,    0.660438f,    1.82126f,
      -0.907014f,    0.771075f,     2.12561f,      -0.639564f,   0.771075f,
      2.12561f,      -0.639564f,    1.01732f,      1.70501f,     -0.718539f,
      1.19474f,      2.03623f,      -0.385956f,    1.19474f,     2.03623f,
      -0.385956f,    1.01732f,      1.70501f,      -0.718539f,   1.47616f,
      1.55554f,      -0.476214f,    1.01732f,      1.70501f,     -0.718539f,
      1.19393f,      1.25846f,      -0.864147f,    1.47616f,     1.55554f,
      -0.476214f,    0.913326f,     2.51692f,      -0.295699f,   1.19474f,
      2.03623f,      -0.385956f,    0.771075f,     2.12561f,     -0.639564f,
      0.371496f,     1.70501f,      -1.18879f,     0.455847f,    1.25846f,
      -1.40158f,     0.0f,          1.55554f,      -1.55107f,    0.000503391f,
      2.03623f,      -1.25554f,     0.371496f,     1.70501f,     -1.18879f,
      0.0f,          1.55554f,      -1.55107f,     -0.455847f,   2.51692f,
      -0.628806f,    -0.770934f,    2.12664f,      -0.642834f,   -0.371187f,
      2.12664f,      -0.932628f,    0.000654732f,  2.03749f,     -1.25757f,
      0.000302679f,  1.55806f,      -1.55514f,     -0.371493f,   1.70713f,
      -1.193f,       -0.371493f,    1.70713f,      -1.193f,      0.000302679f,
      1.55806f,      -1.55514f,     -0.456771f,    1.26175f,     -1.40786f,
      -0.371493f,    1.70713f,      -1.193f,       -0.771432f,   1.44786f,
      -1.06413f,     -0.456771f,    1.26175f,      -1.40786f,    -0.660669f,
      1.82308f,      -0.91134f,     -0.371493f,    1.70713f,     -1.193f,
      -0.771432f,    1.44786f,      -1.06413f,     -0.660669f,   1.82308f,
      -0.91134f,     -0.771432f,    1.44786f,      -1.06413f,    -1.0183f,
      1.70713f,      -0.724107f,    -1.0183f,      1.70713f,     -0.724107f,
      -1.19598f,     1.26175f,      -0.871977f,    -0.771432f,   1.44786f,
      -1.06413f,     -1.19598f,     1.26175f,      -0.871977f,   -1.0183f,
      1.70713f,      -0.724107f,    -1.47811f,     1.55806f,     -0.483378f,
      -1.19541f,     2.03749f,      -0.390495f,    -1.0183f,     1.70713f,
      -0.724107f,    -1.47811f,     1.55806f,      -0.483378f,   -0.771432f,
      1.44786f,      -1.06413f,     -1.19598f,     1.26175f,     -0.871977f,
      -0.913842f,    0.965442f,     -1.26057f,     -0.771432f,   1.44786f,
      -1.06413f,     -0.913842f,    0.965442f,     -1.26057f,    -0.456771f,
      1.26175f,      -1.40786f,     -0.565089f,    2.51692f,     0.776064f,
      -0.73971f,     2.03749f,      1.01701f,      -0.24789f,    2.12664f,
      0.97269f,      -0.24789f,     2.12664f,      0.97269f,     -0.73971f,
      2.03749f,      1.01701f,      -0.400686f,    1.70713f,     1.18352f,
      -0.73971f,     2.03749f,      1.01701f,      -0.914334f,   1.55806f,
      1.25796f,      -0.400686f,    1.70713f,      1.18352f,     -0.400686f,
      1.70713f,      1.18352f,      -0.914334f,    1.55806f,     1.25796f,
      -0.457983f,    1.26175f,      1.40746f,      -0.400686f,   1.70713f,
      1.18352f,      -0.457983f,    1.26175f,      1.40746f,     -0.00137839f,
      1.44786f,      1.31434f,      -0.00137839f,  1.44786f,     1.31434f,
      -0.457983f,    1.26175f,      1.40746f,      -0.00163285f, 0.965442f,
      1.55697f,      -0.00137839f,  1.44786f,      1.31434f,     -0.00163285f,
      0.965442f,     1.55697f,      0.455031f,     1.26175f,     1.40842f,
      0.398202f,     1.70713f,      1.18436f,      -0.00137839f, 1.44786f,
      1.31434f,      0.455031f,     1.26175f,      1.40842f,     -0.00118048f,
      1.82308f,      1.12562f,      -0.00137839f,  1.44786f,     1.31434f,
      0.398202f,     1.70713f,      1.18436f,      -0.00118048f, 1.82308f,
      1.12562f,      -0.400686f,    1.70713f,      1.18352f,     -0.00137839f,
      1.44786f,      1.31434f,      -0.24789f,     2.12664f,     0.97269f,
      -0.400686f,    1.70713f,      1.18352f,      -0.00118048f, 1.82308f,
      1.12562f,      -0.24789f,     2.12664f,      0.97269f,     -0.00118048f,
      1.82308f,      1.12562f,      0.245849f,     2.12664f,     0.973209f,
      0.245849f,     2.12664f,      0.973209f,     -0.00118048f, 1.82308f,
      1.12562f,      0.398202f,     1.70713f,      1.18436f,     0.245849f,
      2.12664f,      0.973209f,     0.398202f,     1.70713f,     1.18436f,
      0.737577f,     2.03749f,      1.01856f,      0.737577f,    2.03749f,
      1.01856f,      0.398202f,     1.70713f,      1.18436f,     0.911694f,
      1.55806f,      1.25987f,      0.398202f,     1.70713f,     1.18436f,
      0.911694f,     1.55806f,      1.25987f,      0.455031f,    1.26175f,
      1.40842f,      0.56346f,      2.51692f,      0.777249f,    0.245849f,
      2.12664f,      0.973209f,     0.737577f,     2.03749f,     1.01856f,
  };

  // One color for each vertex. They were
  // generated randomly.

  vector<GLfloat> color_buff;

  for (int i = 0; i < vertex_buff.size(); i++) {
    for (int j = 0; j < 1; j++) {
      if (i < 0)
        color_buff.push_back(0.0f);
      else
        // color_buff.push_back((float)(rand() %
        // 1000) / 1000);
        color_buff.push_back(0.0f);
      color_buff.push_back(0.0f);
      color_buff.push_back(1.0f);
    }
  }
  float col = 0;
  for (auto t : tiles) {
    // col = (rand() % 132) / 132.0f;
    col += 1 / 132.0f;
    for (int i : t.color_indices)
      for (int j = 0; j < t.color_indices.size(); j++)
        for (int k = 0; k < 9; k++) {
          color_buff[(i - 1) * 9 + k] = col;
        }
  }

  // for (int i = 0;
  // 	 i < sizeof(g_vertex_buffer_data) / 12 * 3;
  // 	 i++)
  // {
  // 	for (int j = 0; j < 3; j++)
  // 	{
  // 		float col =
  // 			1 - ((float)(rand() % 100) / 1000);
  // 		color_buff[i + j] = col;
  // 	}
  // }

  // for (int i = 0; i < 3 * 3 * 210; i++)
  // {
  // 	color_buff[i] = 0.6f;
  // }

  //cout << color_buff.size();

  GLuint vertexbuffer;
  glGenBuffers(1, &vertexbuffer);
  glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
  glBufferData(GL_ARRAY_BUFFER, vertex_buff.size() * sizeof(GLfloat),
               &vertex_buff[0], GL_STATIC_DRAW);

  GLuint colorbuffer;
  glGenBuffers(1, &colorbuffer);
  glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
  glBufferData(GL_ARRAY_BUFFER, color_buff.size() * sizeof(GLfloat),
               &color_buff[0], GL_STATIC_DRAW);

  glfwSetCursorPos(window, 1024 / 2, 768 / 2);

  initText2D("../resources/fonts/Ariel.DDS");

  double lastTime = glfwGetTime();
  int nbFrames = 0;

  int a = 0;
  int b = 0;

  do {
    double currentTime = glfwGetTime();
    nbFrames++;
    if (currentTime - lastTime >= 1.0) { // If last prinf() was more than
      // 1sec ago
      // printf and reset
      printf("%f ms/frame\n", 1000.0 / double(nbFrames));
      nbFrames = 0;
      lastTime += 1.0;
    }

    // for (int i = 0; i <
    // sizeof(g_vertex_buffer_data) / 12
    // * 3; i++)
    // {
    // 	for (int j = 0; j < 3; j++)
    // 	{
    // 		float col = (float)(rand() % 1000)
    // / 1000; 		color_buff[i + j] = col;
    // 	}
    // }

    glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);

    static int oldSpace = GLFW_RELEASE;
    int newSpace = glfwGetKey(window, GLFW_KEY_SPACE);
    if (newSpace == GLFW_RELEASE && oldSpace == GLFW_PRESS) {
      for (b = 0; b < 9; b++) {
        color_buff[a * 9 + b] = 0.0f;
      }
      a++;
    }
    oldSpace = newSpace;

    static int oldAlt = GLFW_RELEASE;
    int newAlt = glfwGetKey(window, GLFW_KEY_RIGHT_ALT);
    if (newAlt == GLFW_RELEASE && oldAlt == GLFW_PRESS) {
      cout << "hey";
      if (b == 3) {
        b = 0;
        a++;
      }
      for (int c = 0; c < 3; c++) {
        color_buff[a * 9 + b * 3 + c] = 0.0f;
      }

      b++;
    }
    oldAlt = newAlt;

    glBufferData(GL_ARRAY_BUFFER, color_buff.size() * sizeof(GLfloat),
                 &color_buff[0], GL_STATIC_DRAW);

    // Clear the screen
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Use our shader
    glUseProgram(programID);

    // Compute the MVP matrix from keyboard and
    // mouse input
    computeMatricesFromInputs();
    glm::mat4 ProjectionMatrix = getProjectionMatrix();
    glm::mat4 ViewMatrix = getViewMatrix();
    glm::mat4 ModelMatrix = glm::mat4(1.0);
    glm::mat4 MVP = ProjectionMatrix * ViewMatrix * ModelMatrix;

    // Send our transformation to the currently
    // bound shader, in the "MVP" uniform
    glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &MVP[0][0]);

    // 1rst attribute buffer : vertices
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
    glVertexAttribPointer(0, // attribute. No particular reason for
                          // 0, but must match the layout in the
                          // shader.
                          3,        // size
                          GL_FLOAT, // type
                          GL_FALSE, // normalized?
                          0,        // stride
                          (void *)0 // array buffer offset
    );

    // 2nd attribute buffer : colors
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
    glVertexAttribPointer(1, // attribute. No particular reason for
                          // 1, but must match the layout in the
                          // shader.
                          3,        // size
                          GL_FLOAT, // type
                          GL_FALSE, // normalized?
                          0,        // stride
                          (void *)0 // array buffer offset
    );

    // Draw the triangle !
    glDrawArrays(GL_TRIANGLES, 0,
                 sizeof(g_vertex_buffer_data) / 3); // 12*3 indices starting
                                                    // at 0 -> 12 triangles

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);

    char text[256];
    sprintf(text, "%.2f sec", glfwGetTime());
    printText2D(text, 10, 500, 60);
    sprintf(text, "triangle %i", a);
    printText2D(text, 10, 300, 40);
    sprintf(text, "vertex %i", a * 3 + b);
    printText2D(text, 10, 200, 40);

    // Swap buffers
    glfwSwapBuffers(window);
    glfwPollEvents();

  } // Check if the ESC key was pressed or the
    // window was
  // closed
  while (glfwGetKey(window, GLFW_KEY_ESCAPE) != GLFW_PRESS &&
         glfwWindowShouldClose(window) == 0);

  // Cleanup VBO and shader
  glDeleteBuffers(1, &vertexbuffer);
  glDeleteBuffers(1, &colorbuffer);
  glDeleteProgram(programID);
  glDeleteVertexArrays(1, &VertexArrayID);

  cleanupText2D();

  // Close OpenGL window and terminate GLFW
  glfwTerminate();

  return 0;
}
